import random
import sys
import time
import os

# --- CONSTANTES ---
VIDA_MAXIMA = 100
ENERGIA_MAXIMA = 100
PONTUACAO_MAXIMA = 500
MOCHILA_MAX = 5
ENERGIA_CUSTO_ABRIGO_BASE = 20
PORCENTAGEM_COMIDA_BASE = 0.6
TEMPO_LIMITE_DIA = 10
ENERGIA_REGEN_SONO_BASE = 40
VIDA_REGEN_SONO_BASE = 15

# --- DADOS DO JOGO ---
# Dicion√°rios centralizados pra evitar repeti√ß√£o
# Adicionado "tipo" para facilitar o filtro e manuseio
ITENS_GERAL = {
#Armas 
    "Faca": {"tipo": "arma", "dano_min": 10, "dano_max": 20},
    "Arco": {"tipo": "arma", "dano_min": 15, "dano_max": 25},
    "Escopeta": {"tipo": "arma", "dano_min": 30, "dano_max": 50},
    "Machado": {"tipo": "arma", "dano_min": 20, "dano_max": 35},
    "Lan√ßa": {"tipo": "arma", "dano_min": 18, "dano_max": 28},
    "Pistola": {"tipo": "arma", "dano_min": 25, "dano_max": 40},
    "Espingarda de Cano Curto": {"tipo": "arma", "dano_min": 35, "dano_max": 55},
    "Taco com Pregos": {"tipo": "arma", "dano_min": 12, "dano_max": 24},
    "Foice Enferrujada": {"tipo": "arma", "dano_min": 16, "dano_max": 26},
#Itens de defesa 
    "Armadura de Couro": {"tipo": "protecao", "protecao": 10},
    "Capacete": {"tipo": "protecao", "protecao": 5},
    "Escudo Improvisado": {"tipo": "protecao", "protecao": 8},
#itens de regenera√ß√£o
    "Kit de Primeiros Socorros": {"tipo": "medico", "vida_recuperada": 25, "cura_ferimento_grave": True}, 
    "Atadura": {"tipo": "medico", "vida_recuperada": 10},
    "Ant√≠doto": {"tipo": "medico", "cura_envenenamento": True, "energia_recuperada": 0}, # Adicionei energia_recuperada para ser consistente
    "Ch√° de Ervas": {"tipo": "medico", "cura_doenca": True, "energia_recuperada": 5}, 
#itens comestiveis
    "Fruta": {"tipo": "comida", "vida_recuperada": (3, 8), "energia_recuperada": 10},
    "Nozes": {"tipo": "comida", "vida_recuperada": (3, 8), "energia_recuperada": 10},
    "Raiz comest√≠vel": {"tipo": "comida", "vida_recuperada": (3, 8), "energia_recuperada": 10},
    "Cogumelo Desconhecido": {"tipo": "comida", "vida_recuperada": (-5, 0), "energia_recuperada": 5, "chance_doenca": 0.5},
}

ANIMAIS = {
    "üêÜOn√ßa": {"dano_min": 15, "dano_max": 25, "vida": 60, "chance_fuga_base": 0.3, "chance_ferimento_grave": 0.2},
    "üêçCobra": {"dano_min": 8, "dano_max": 18, "vida": 30, "chance_fuga_base": 0.6, "chance_envenenamento": 0.7},
    "üê∫Lobo Guar√°": {"dano_min": 12, "dano_max": 22, "vida": 50, "chance_fuga_base": 0.4, "chance_ferimento_grave": 0.1},
    "üêóJavali": {"dano_min": 10, "dano_max": 20, "vida": 30, "chance_fuga_base": 0.4, "chance_ferimento_grave": 0.15},
    "üêäjacar√©": {"dano_min": 8, "dano_max": 25, "vida": 60, "chance_fuga_base": 0.7, "chance_ferimento_grave": 0.3},
    "üêíChimpanz√©": {"dano_min": 6, "dano_max": 15, "vida": 80, "chance_fuga_base": 0.7},
    "ü¶çGorila": {"dano_min": 12, "dano_max": 25, "vida": 100, "chance_fuga_base": 0.3, "chance_ferimento_grave": 0.25},
}

# --- ESTADOS DO JOGO ---
INTRO = 0
JOGANDO = 1
ESPERA_COMIDA = 2 
ESPERA_USAR_ITEM = 3 
FIM = 4
COMBATE = 5

# --- VARI√ÅVEIS GLOBAIS (estado do jogo) ---
nome_jogador = "Aventureiro(a)"
vida = VIDA_MAXIMA
energia = ENERGIA_MAXIMA
mochila = []
pontuacao = 0
encontrou_saida = False
abrigo_construido = False
dias_passados = 1
acoes_no_dia = 0
historico_acoes = {1: []}
estado_jogo = INTRO
mensagem_final = ""
mensagem_acao = ""
item_a_processar = None # Usado para comida encontrada ou item da mochila a usar
inimigo_atual = None
vida_inimigo_atual = 0

# NOVAS VARI√ÅVEIS PARA O SISTEMA DE SA√öDE
status_envenenado = False
status_ferimento_grave = False
status_doente = False

# --- FUN√á√ïES DE UTILIDADE ---
def clear_screen():
    """Limpa a tela do terminal."""
    os.system('cls' if sys.platform.startswith('win') else 'clear')

def show_animation(frames, delay=0.2, message="Processando..."):
    """Exibe uma sequ√™ncia de quadros como uma anima√ß√£o no terminal."""
    for frame in frames:
        clear_screen()
        print(message)
        print(frame)
        time.sleep(delay)
    clear_screen()

def adicionar_historico(mensagem):
    """Adiciona uma mensagem ao hist√≥rico de a√ß√µes do dia atual."""
    historico_acoes.setdefault(dias_passados, []).append(mensagem)

def adicionar_item_mochila(item_nome):
    """Tenta adicionar um item √† mochila."""
    if len(mochila) >= MOCHILA_MAX:
        return False
    mochila.append(item_nome)
    return True

def calcular_protecao_total():
    """Calcula o valor total de prote√ß√£o f√≠sica que o jogador possui na mochila."""
    return sum(ITENS_GERAL[item]["protecao"] for item in mochila if ITENS_GERAL.get(item, {}).get("tipo") == "protecao")

def escolher_melhor_arma():
    """Retorna a melhor arma na mochila, se houver."""
    armas_possuidas = [item for item in mochila if ITENS_GERAL.get(item, {}).get("tipo") == "arma"]
    if armas_possuidas:
        return max(armas_possuidas, key=lambda x: ITENS_GERAL[x]["dano_max"])
    return None

def usar_arma_em_combate():
    """Calcula o dano de ataque usando a melhor arma dispon√≠vel."""
    arma = escolher_melhor_arma()
    if arma:
        dano = random.randint(ITENS_GERAL[arma]["dano_min"], ITENS_GERAL[arma]["dano_max"])
        return dano, arma
    return random.randint(5, 10), "m√£os nuas" # Dano base se n√£o tiver arma

# --- FUN√á√ÉO PARA PROCESSAR STATUS NEGATIVOS ---
def processar_status_negativos():
    """Aplica os efeitos dos status negativos (envenenamento, ferimento, doen√ßa) a cada turno/a√ß√£o."""
    global vida, energia, mensagem_acao, status_envenenado, status_ferimento_grave, status_doente

    if status_envenenado:
        dano_veneno = random.randint(2, 5)
        vida -= dano_veneno
        mensagem_acao += f"\nVoc√™ est√° envenenado(a) e perdeu {dano_veneno} de vida! üòµ"
        adicionar_historico(f"Perdeu {dano_veneno} de vida devido ao envenenamento.")
        if vida <= 0: return # Sai cedo se a vida zerar

    if status_ferimento_grave:
        dano_ferimento = random.randint(1, 3)
        vida -= dano_ferimento
        mensagem_acao += f"\nSeu ferimento grave est√° sangrando e voc√™ perdeu {dano_ferimento} de vida! ü©∏"
        adicionar_historico(f"Perdeu {dano_ferimento} de vida devido ao ferimento grave.")
        if vida <= 0: return # Sai cedo se a vida zerar

    if status_doente:
        energia_drenada = random.randint(1, 4)
        energia -= energia_drenada
        mensagem_acao += f"\nVoc√™ se sente fraco(a) pela doen√ßa e perdeu {energia_drenada} de energia! üò©"
        adicionar_historico(f"Perdeu {energia_drenada} de energia devido √† doen√ßa.")
        if energia <= 0: return # Sai cedo se a energia zerar

# --- FUN√á√ïES DE A√á√ÉO DO JOGADOR ---

def processar_consumo_item(item_nome, vida_recuperada, energia_recuperada):
    """Aplica os efeitos de consumo de um item e remove-o da mochila."""
    global vida, energia, pontuacao, mensagem_acao, mochila, acoes_no_dia, status_envenenado, status_ferimento_grave, status_doente
    
    # Efeitos gerais de vida e energia
    vida = min(vida + vida_recuperada, VIDA_MAXIMA)
    energia = min(energia + energia_recuperada, ENERGIA_MAXIMA)
    pontuacao += 30 # Pontos fixos por consumir
    
    # Efeitos espec√≠ficos para o novo sistema de sa√∫de
    item_data = ITENS_GERAL[item_nome]
    
    efeitos_especificos_msg = ""

    if item_data.get("cura_envenenamento"):
        if status_envenenado:
            status_envenenado = False
            efeitos_especificos_msg += " Voc√™ se curou do envenenamento! ‚ú®"
        else:
            efeitos_especificos_msg += " N√£o estava envenenado, mas o ant√≠doto foi consumido. ü§î"
    
    if item_data.get("cura_ferimento_grave"):
        if status_ferimento_grave:
            status_ferimento_grave = False
            efeitos_especificos_msg += " Seu ferimento grave foi tratado! üí™"
        else:
            efeitos_especificos_msg += " N√£o tinha ferimento grave, mas o kit foi usado. ü§î"

    if item_data.get("cura_doenca"):
        if status_doente:
            status_doente = False
            efeitos_especificos_msg += " Voc√™ se sentiu melhor da doen√ßa! üåü"
        else:
            efeitos_especificos_msg += " N√£o estava doente, mas o ch√° foi consumido. ü§î"
    
    # Efeito colateral da comida (Cogumelo Desconhecido)
    if item_data.get("chance_doenca") and random.random() < item_data["chance_doenca"]:
        status_doente = True
        efeitos_especificos_msg += " Mas parece que voc√™ pegou uma doen√ßa estranha... ü§¢"
        adicionar_historico(f"Voc√™ consumiu {item_nome} e ficou doente.")

    mensagem_acao = f"Voc√™ usou o(a) {item_nome}. ‚ù§Ô∏è +{vida_recuperada} vida, ‚ö° +{energia_recuperada} energia, ‚≠ê +30 pontos!" + efeitos_especificos_msg
    adicionar_historico(f"Voc√™ consumiu um {item_nome}.")
    mochila.remove(item_nome) # Remove pelo nome porque pode haver duplicatas.

def usar_item_da_mochila(indice_escolhido):
    """Gerencia o uso de um item da mochila."""
    global mensagem_acao, estado_jogo, item_a_processar, acoes_no_dia

    itens_usaveis = [item for item in mochila if ITENS_GERAL.get(item, {}).get("tipo") in ["comida", "medico", "utilitario"]]

    try:
        item_nome = itens_usaveis[indice_escolhido - 1] # Pega o nome do item da lista filtrada
        
        # Anima√ß√£o de uso para qualquer item
        frames_item = [
            "   [ ]", "   [U]", "   [U-]", "   [U-S]", "   [U-S-E]",
            "   [U-S-E] \n   _|_", "   [U-S-E] \n   _|_ \n    |", "   [U-S-E] \n   _|_ \n    | \n   / \\"
        ]
        show_animation(frames_item, delay=0.1, message="ü©π Usando item...")

        item_data = ITENS_GERAL[item_nome]
        item_tipo = item_data["tipo"]

        vida_recuperada = 0
        if "vida_recuperada" in item_data:
            if isinstance(item_data["vida_recuperada"], tuple):
                vida_recuperada = random.randint(*item_data["vida_recuperada"])
            else:
                vida_recuperada = item_data["vida_recuperada"]
        
        energia_recuperada = item_data.get("energia_recuperada", 0) # Certifica que sempre tenha um valor

        if item_tipo == "medico" or item_tipo == "comida":
            processar_consumo_item(item_nome, vida_recuperada, energia_recuperada)
        elif item_tipo == "utilitario":
            # Para itens utilit√°rios que n√£o se "consomem" ou t√™m efeito espec√≠fico
            mensagem_acao = f"Voc√™ tentou usar o(a) {item_nome}, mas n√£o teve efeito imediato. ü§î"
            adicionar_historico(f"Voc√™ tentou usar um {item_nome}.")
            # Se o item √© de uso √∫nico, remova:
            if item_nome == "Corda": # Exemplo: corda pode ser usada uma vez
                mochila.remove(item_nome)
        else: # Tipo "arma" ou "protecao" ou outros sem uso direto
            mensagem_acao = f"O(a) {item_nome} n√£o pode ser 'usado' assim. Ele(a) √© {item_tipo} e √© ativo(a) automaticamente."
            adicionar_historico(f"Voc√™ tentou usar {item_nome}, mas n√£o √© um item de uso direto.")
            
        acoes_no_dia += 1 # Usar item conta como uma a√ß√£o
        estado_jogo = JOGANDO

    except (ValueError, IndexError):
        mensagem_acao = "Entrada inv√°lida ou n√∫mero fora do alcance dos itens us√°veis. üî¢"
        estado_jogo = ESPERA_USAR_ITEM # Permanece no estado para nova tentativa

def buscar_comida():
    """A√ß√£o de buscar comida."""
    global mensagem_acao, item_a_processar, acoes_no_dia, vida, energia, pontuacao, status_doente
    
    frames_buscar = ["Buscando  .", "Buscando ..", "Buscando ..."]
    show_animation(frames_buscar, delay=0.3, message="üå≥ Procurando por comida...")

    acoes_no_dia += 1

    chance_encontrar = PORCENTAGEM_COMIDA_BASE * (0.6 if abrigo_construido else 1.0)
    
    if random.random() < chance_encontrar:
        comidas_encontradas = [item for item, data in ITENS_GERAL.items() if data["tipo"] == "comida"]
        
        # Aumentar a chance de encontrar Cogumelo Desconhecido
        if random.random() < 0.15: # 15% de chance de ser um cogumelo desconhecido
            item_nome = "Cogumelo Desconhecido"
        else:
            # Garante que n√£o escolha o cogumelo desconhecido se houver outras op√ß√µes
            outras_comidas = [c for c in comidas_encontradas if c != "Cogumelo Desconhecido"]
            if outras_comidas:
                item_nome = random.choice(outras_comidas)
            else: # Caso s√≥ exista o cogumelo, ele ser√° escolhido
                item_nome = "Cogumelo Desconhecido"
        
        item_a_processar = item_nome # Armazena o nome do item encontrado
        item_data = ITENS_GERAL[item_nome]
        
        # Ajuste para vida_recuperada que pode ser negativa
        vida_ganho_str = ""
        if isinstance(item_data["vida_recuperada"], tuple):
            vida_ganho = random.randint(*item_data["vida_recuperada"])
            vida_ganho_str = f"({vida_ganho})" # Mostra o valor exato que pode ser negativo
        else:
            vida_ganho = item_data["vida_recuperada"]
            vida_ganho_str = f"+{vida_ganho}"

        energia_ganho = item_data["energia_recuperada"]
        adicionar_historico(f"Voc√™ encontrou comida ({item_nome}).")
        mensagem_acao = (f"Voc√™ encontrou comida: {item_nome} (‚ù§Ô∏è {vida_ganho_str} vida, ‚ö° +{energia_ganho} energia).\n"
                         "Deseja (C) Comer agora ou (G) Guardar na mochila? (C/G) ‚ùì")
        return True # Indica que encontrou algo e precisa de escolha
    else:
        energia_ganho = 10
        vida_ganho = random.randint(3, 8)
        energia = min(energia + energia_ganho, ENERGIA_MAXIMA)
        vida = min(vida + vida_ganho, VIDA_MAXIMA)
        pontuacao += 40
        adicionar_historico(f"Voc√™ buscou por comida, mas n√£o encontrou nada de valor.")
        mensagem_acao = f"Voc√™ buscou, mas n√£o encontrou comida. Ganhou ‚ö° +{energia_ganho} energia e ‚ù§Ô∏è +{vida_ganho} vida pelo esfor√ßo. ‚≠ê +40 pontos!"
        item_a_processar = None
        return False # N√£o encontrou nada que precise de escolha

def montar_abrigo():
    """A√ß√£o de montar um abrigo."""
    global energia, pontuacao, abrigo_construido, mensagem_acao, acoes_no_dia
    if abrigo_construido:
        adicionar_historico(f"Voc√™ tentou construir um abrigo novamente, mas j√° tinha um.")
        mensagem_acao = "Voc√™ j√° montou o abrigo, n√£o pode construir novamente. üèïÔ∏è"
        return

    custo_energia = int(ENERGIA_CUSTO_ABRIGO_BASE * 1.5)
    if energia < custo_energia:
        adicionar_historico(f"Voc√™ tentou montar um abrigo, mas n√£o tinha energia suficiente.")
        mensagem_acao = f"‚ö° Energia insuficiente para montar o abrigo! Voc√™ precisa de {custo_energia} de energia."
        return
    
    frames_abrigo = ["Construindo [.]", "Construindo [..]", "Construindo [...]",
                     "Construindo [....]", "Construindo [.....]", "Construindo [‚úì]"]
    show_animation(frames_abrigo, delay=0.2, message="üõ†Ô∏è Montando o abrigo...")

    energia -= custo_energia
    pontuacao += 30
    abrigo_construido = True
    acoes_no_dia += 1
    adicionar_historico(f"Voc√™ montou um abrigo seguro e descansou.")
    mensagem_acao = f"Voc√™ montou um abrigo e descansou um pouco. üò¥ (-{custo_energia} energia, ‚≠ê +30 pontos)"

def explorar():
    """A√ß√£o de explorar a floresta."""
    global vida, energia, pontuacao, estado_jogo, inimigo_atual, vida_inimigo_atual, encontrou_saida, mensagem_acao, acoes_no_dia, item_a_processar
    
    custo_energia = 15
    if energia < custo_energia:
        adicionar_historico(f"Voc√™ tentou explorar, mas estava muito exausto.")
        mensagem_acao = "‚ö° Energia insuficiente para explorar!"
        return False # N√£o permite a a√ß√£o de explora√ß√£o
    
    energia -= custo_energia
    acoes_no_dia += 1

    frames_explorar = [" Explorando...", "|--|  .--|", "|  | /   |", "\\--/----|", "   ?     !"]
    show_animation(frames_explorar, delay=0.25, message="üó∫Ô∏è Explorando a √°rea...")
    
    chance_comida_explorar = PORCENTAGEM_COMIDA_BASE * (0.6 if abrigo_construido else 1.0)
    chance_caminho = min(0.10, pontuacao / PONTUACAO_MAXIMA * 0.10)

    evento = random.choices(
        population=["animal", "nada", "comida", "item_medico", "item_protecao", "armamento", "caminho_de_casa"],
        weights=[0.3, 0.15, chance_comida_explorar, 0.08, 0.07, 0.1, chance_caminho],
        k=1,
    )[0]
    
    if evento == "caminho_de_casa":
        encontrou_saida = True
        mensagem_acao = "Ap√≥s muita explora√ß√£o, voc√™ avista uma trilha conhecida! üèûÔ∏è Parece que voc√™ encontrou o caminho de volta para casa! üéâ"
        adicionar_historico(f"Ap√≥s vasta explora√ß√£o, voc√™ encontrou o caminho de casa!")
    elif evento == "animal":
        animal_encontrado = random.choice(list(ANIMAIS.keys()))
        inimigo_atual = animal_encontrado
        vida_inimigo_atual = ANIMAIS[animal_encontrado]["vida"]
        estado_jogo = COMBATE
        mensagem_acao = f"Voc√™ encontrou um {inimigo_atual}! üò± Prepare-se para lutar!"
        adicionar_historico(f"Voc√™ foi surpreendido por um(a) {inimigo_atual} e entrou em combate!")
    elif evento == "comida":
        return buscar_comida() # Reutiliza a l√≥gica de buscar comida para o evento de comida
    else: # Itens ou nada
        item_tipo_map = {
            "item_medico": "medico",
            "item_protecao": "protecao",
            "armamento": "arma"
        }
        tipo_item_encontrado = item_tipo_map.get(evento)

        if tipo_item_encontrado:
            possiveis_itens = [item for item, data in ITENS_GERAL.items() if data["tipo"] == tipo_item_encontrado]
            # Excluir Cogumelo Desconhecido de item_medico para evitar que apare√ßa aqui
            if tipo_item_encontrado == "medico":
                possiveis_itens = [item for item in possiveis_itens if item != "Cogumelo Desconhecido"]

            if possiveis_itens:
                item_encontrado = random.choice(possiveis_itens)
                if adicionar_item_mochila(item_encontrado):
                    pontuacao_extra = {"medico": 25, "protecao": 35, "arma": 40}.get(tipo_item_encontrado, 0)
                    pontuacao += pontuacao_extra
                    mensagem_acao = f"Voc√™ encontrou um item: {item_encontrado}! ({tipo_item_encontrado.capitalize()}) ‚≠ê +{pontuacao_extra} pontos!"
                    adicionar_historico(f"Voc√™ encontrou um item de {tipo_item_encontrado}: {item_encontrado}.")
                else:
                    mensagem_acao = f"Voc√™ encontrou um item: {item_encontrado}, mas sua mochila est√° cheia. üéíüö´"
                    adicionar_historico(f"Voc√™ encontrou um item de {tipo_item_encontrado} ({item_encontrado}), mas sua mochila estava cheia.")
            else: # N√£o encontrou itens espec√≠ficos do tipo, mesmo que o evento tenha sido sorteado
                mensagem_acao = "Voc√™ explorou mas n√£o encontrou nada relevante. ü§∑"
                adicionar_historico(f"Voc√™ explorou a √°rea, mas n√£o encontrou nada de especial.")
        else: # evento == "nada"
            mensagem_acao = "Voc√™ explorou mas n√£o encontrou nada relevante. ü§∑"
            adicionar_historico(f"Voc√™ explorou a √°rea, mas n√£o encontrou nada de especial.")
    return False # N√£o requer escolha adicional como a comida

def dormir():
    """A√ß√£o de dormir para passar o dia."""
    global vida, energia, dias_passados, acoes_no_dia, mensagem_acao, status_doente, status_envenenado, status_ferimento_grave

    if not abrigo_construido:
        adicionar_historico(f"Voc√™ tentou dormir, mas n√£o tinha um abrigo seguro.")
        mensagem_acao = "Voc√™ n√£o tem um abrigo seguro para dormir. Encontre um local ou construa um!"
        return

    frames_dormir = ["Zzz .", "Zzz ..", "Zzz ...", "Zzz .", "Zzz ..", "Zzz ...", "üåÑ Acordando..."]
    show_animation(frames_dormir, delay=0.3, message="üò¥ Voc√™ est√° dormindo...")

    energia_recuperada = int(ENERGIA_REGEN_SONO_BASE * 1.5)
    vida_recuperada = int(VIDA_REGEN_SONO_BASE * 1.5)
    
    vida = min(vida + vida_recuperada, VIDA_MAXIMA)
    energia = min(energia + energia_recuperada, ENERGIA_MAXIMA)
    
    dias_passados += 1
    acoes_no_dia = 0

    # EFEITOS DO SONO NOS STATUS NEGATIVOS
    sono_cura_mensagem = ""
    if status_doente and random.random() < 0.3: # 30% de chance de melhorar da doen√ßa ao dormir
        status_doente = False
        sono_cura_mensagem += " Voc√™ se sentiu um pouco melhor da doen√ßa. "
    
    adicionar_historico(f"Voc√™ dormiu em seu abrigo seguro e se recuperou bem.")
    mensagem_acao = (f"Voc√™ dormiu e um novo dia come√ßou! ‚òÄÔ∏è"
                     f" ‚ù§Ô∏è +{vida_recuperada} vida, ‚ö° +{energia_recuperada} energia." + sono_cura_mensagem)

# --- FUN√á√ïES DE COMBATE ---
def gerenciar_combate():
    """Gerencia o combate turno a turno."""
    global vida, energia, pontuacao, estado_jogo, inimigo_atual, vida_inimigo_atual, mensagem_acao, acoes_no_dia, status_envenenado, status_ferimento_grave

    clear_screen()
    print(f"‚öîÔ∏è VOC√ä EST√Å EM COMBATE COM UM(A) {inimigo_atual}! ‚öîÔ∏è")
    print(f"‚ù§Ô∏è Sua vida: {vida}/{VIDA_MAXIMA} | ‚ö° Sua energia: {energia}/{ENERGIA_MAXIMA}")
    print(f"üëæ Vida do {inimigo_atual}: {vida_inimigo_atual}/{ANIMAIS[inimigo_atual]['vida']}")
    print("\nEscolha sua a√ß√£o:")
    print("   (A) Atacar")
    print("   (D) Defender")
    print("   (F) Fugir")

    escolha_combate = input("Sua a√ß√£o: ").strip().upper()
    mensagem_acao_combate_turno = "" # Mensagem espec√≠fica para este turno de combate
    dano_defesa = 0

    if escolha_combate == 'A':
        dano_causado, arma_usada = usar_arma_em_combate()
        vida_inimigo_atual -= dano_causado
        pontuacao += 5
        mensagem_acao_combate_turno += f"Voc√™ ataca com seu(sua) {arma_usada}, causando {dano_causado} de dano! üí•"
        adicionar_historico(f"Voc√™ atacou o(a) {inimigo_atual} com {arma_usada}, causando {dano_causado} de dano.")

    elif escolha_combate == 'D':
        energia_gasta = 5
        if energia >= energia_gasta:
            energia -= energia_gasta
            dano_defesa = random.randint(10, 20)
            mensagem_acao_combate_turno += f"Voc√™ se defende, reduzindo o pr√≥ximo dano recebido em {dano_defesa}. üõ°Ô∏è (-{energia_gasta} energia)"
            adicionar_historico(f"Voc√™ se defendeu do ataque do(a) {inimigo_atual}.")
        else:
            mensagem_acao_combate_turno = "‚ö° Energia insuficiente para defender! Voc√™ fica vulner√°vel."
            adicionar_historico(f"Voc√™ tentou se defender do(a) {inimigo_atual}, mas estava sem energia.")

    elif escolha_combate == 'F':
        custo_energia_fuga = 10
        if energia >= custo_energia_fuga:
            energia -= custo_energia_fuga
            chance_fuga = ANIMAIS[inimigo_atual]["chance_fuga_base"] + (vida / VIDA_MAXIMA * 0.2)
            
            frames_fuga = ["Correndo  . ", "Correndo ..", "Correndo ... üèÉ", "Fugindo!"]
            show_animation(frames_fuga, delay=0.15, message="Tentando fugir...")

            if random.random() < chance_fuga:
                mensagem_acao = f"Voc√™ conseguiu fugir do(a) {inimigo_atual}! üí® (-{custo_energia_fuga} energia)"
                adicionar_historico(f"Voc√™ conseguiu fugir do(a) {inimigo_atual}!")
                estado_jogo = JOGANDO
                inimigo_atual = None
                vida_inimigo_atual = 0
                acoes_no_dia += 1
                return # Sai da fun√ß√£o pois o combate terminou
            else:
                dano_retaliacao = random.randint(ANIMAIS[inimigo_atual]["dano_min"], ANIMAIS[inimigo_atual]["dano_max"]) // 2
                vida -= dano_retaliacao
                mensagem_acao_combate_turno = f"Voc√™ tentou fugir, mas falhou! üò¨ O(a) {inimigo_atual} n√£o te deixa escapar! (-{custo_energia_fuga} energia). Voc√™ sofreu {dano_retaliacao} de dano de retalia√ß√£o! üíî"
                adicionar_historico(f"Voc√™ tentou fugir do(a) {inimigo_atual}, mas falhou e sofreu dano.")
        else:
            mensagem_acao_combate_turno = "‚ö° Energia insuficiente para tentar a fuga! Voc√™ precisa de mais energia."
            adicionar_historico(f"Voc√™ tentou fugir do(a) {inimigo_atual}, mas estava sem energia.")
    else:
        mensagem_acao_combate_turno = "Comando inv√°lido no combate. Tente (A)tacar, (D)efender ou (F)ugir."
        
    if vida_inimigo_atual <= 0:
        pontuacao += 100
        mensagem_acao = f"Voc√™ derrotou o(a) {inimigo_atual}! üéâ (+100 pontos)" # Esta mensagem ser√° a principal agora
        adicionar_historico(f"Voc√™ derrotou o(a) {inimigo_atual} em combate!")
        estado_jogo = JOGANDO
        inimigo_atual = None
        vida_inimigo_atual = 0
        acoes_no_dia += 1
        return # Sai da fun√ß√£o pois o combate terminou

    # Ataque do animal (se o combate n√£o terminou)
    dano_animal = random.randint(ANIMAIS[inimigo_atual]["dano_min"], ANIMAIS[inimigo_atual]["dano_max"])
    protecao_total = calcular_protecao_total()
    dano_animal_final = max(0, dano_animal - dano_defesa - protecao_total)
    
    vida -= dano_animal_final
    mensagem_acao_combate_turno += f"\nO(a) {inimigo_atual} ataca, causando {dano_animal_final} de dano a voc√™! ü©∏"
    if protecao_total > 0:
        mensagem_acao_combate_turno += f" (Sua prote√ß√£o f√≠sica reduziu {protecao_total} de dano!)"

    adicionar_historico(f"O(a) {inimigo_atual} te atacou, causando {dano_animal_final} de dano.")
    pontuacao -= 5

    # APLICA√á√ÉO DE STATUS NEGATIVOS AP√ìS O ATAQUE DO ANIMAL
    if ANIMAIS[inimigo_atual].get("chance_envenenamento") and random.random() < ANIMAIS[inimigo_atual]["chance_envenenamento"]:
        if not status_envenenado: # Evita aplicar se j√° estiver envenenado
            status_envenenado = True
            mensagem_acao_combate_turno += f" Voc√™ foi envenenado(a) pelo(a) {inimigo_atual}! ‚ò†Ô∏è"
            adicionar_historico(f"Voc√™ foi envenenado(a) pelo(a) {inimigo_atual}.")
    
    if ANIMAIS[inimigo_atual].get("chance_ferimento_grave") and random.random() < ANIMAIS[inimigo_atual]["chance_ferimento_grave"]:
        if not status_ferimento_grave: # Evita aplicar se j√° tiver ferimento grave
            status_ferimento_grave = True
            mensagem_acao_combate_turno += f" Voc√™ sofreu um ferimento grave! ü©π"
            adicionar_historico(f"Voc√™ sofreu um ferimento grave em combate contra o(a) {inimigo_atual}.")
    
    mensagem_acao = mensagem_acao_combate_turno # Atualiza a mensagem principal do jogo
    
    frames_combate = [f"Voc√™ vs {inimigo_atual}", "   ‚öîÔ∏è", "   üí•", "   ‚öîÔ∏è", f"({inimigo_atual} ataca!)"]
    show_animation(frames_combate, delay=0.2, message="‚öîÔ∏è Combate em andamento!")
    
    if vida <= 0:
        estado_jogo = FIM
        mensagem_final = "derrota"
        adicionar_historico(f"Voc√™ sucumbiu aos ferimentos e foi derrotado(a) pelo(a) {inimigo_atual}.")
        return

# --- FUN√á√ïES DE EXIBI√á√ÉO E FIM DE JOGO ---
def mostrar_status():
    """Exibe o status atual do jogador no terminal."""
    print("--- Status do Jogador ---")
    print(f"üë§ Nome: {nome_jogador}")
    print(f"üóìÔ∏è Dia: {dias_passados} | ‚è∞ A√ß√µes: {acoes_no_dia}/{TEMPO_LIMITE_DIA}")
    print(f"‚ù§Ô∏è Vida: {vida}/{VIDA_MAXIMA} | ‚ö° Energia: {energia}/{ENERGIA_MAXIMA}")
    print(f"‚≠ê Pontos: {pontuacao}")
    protecao_total = calcular_protecao_total()
    if protecao_total > 0:
        print(f"üõ°Ô∏è Prote√ß√£o F√≠sica: {protecao_total}")

    condicoes_atuais = []
    if status_envenenado:
        condicoes_atuais.append("‚ò†Ô∏è Envenenado!")
    if status_ferimento_grave:
        condicoes_atuais.append("ü©π Ferimento Grave!")
    if status_doente:
        condicoes_atuais.append("ü§¢ Doente!")
    
    if condicoes_atuais:
        print("üö® Condi√ß√µes: " + " | ".join(condicoes_atuais))

    print("üéí Mochila: " + (", ".join(mochila) if mochila else "Vazia"))
    print("-------------------------")

def verificar_fim_de_jogo():
    """Verifica as condi√ß√µes de vit√≥ria ou derrota."""
    global encontrou_saida, pontuacao, vida, energia, mensagem_final, estado_jogo

    if vida <= 0:
        mensagem_final = "derrota"
        adicionar_historico(f"Voc√™ sucumbiu aos ferimentos. Fim da jornada.")
        estado_jogo = FIM
        return True
    if energia <= 0:
        mensagem_final = "derrota_energia"
        adicionar_historico(f"Voc√™ ficou completamente exausto(a) e n√£o conseguiu mais continuar. Fim da jornada.")
        estado_jogo = FIM
        return True
    if pontuacao >= PONTUACAO_MAXIMA or encontrou_saida:
        encontrou_saida = True # Garante que a flag esteja true para a mensagem final
        mensagem_final = "vitoria"
        estado_jogo = FIM
        return True
    return False

def desenhar_intro():
    """Exibe a tela de introdu√ß√£o do jogo e coleta o nome do jogador."""
    global nome_jogador
    clear_screen()
    print("===================================")
    print("     üå≤ SOBREVIV√äNCIA NA FLORESTA üå≥     ")
    print("===================================\n")
    print("Voc√™ est√° perdido em uma floresta e precisa sobreviver. üß≠")
    print("Coletar recursos, montar um abrigo, explorar e fugir de animais selvagens. ü¶äüêªüêç")
    print("Voc√™ tamb√©m pode encontrar armas para se defender. üó°Ô∏èüõ°Ô∏è")
    print("A comida encontrada pode ser comida na hora ou guardada para depois. üçéüå∞")
    print("O tempo passa a cada a√ß√£o. Gerencie seus dias para n√£o se exaurir. ‚òÄÔ∏èüåô")
    print("Construa um abrigo para poder descansar e recuperar suas for√ßas! üèïÔ∏è")
    print("Cuidado com os perigos ocultos: voc√™ pode ser envenenado(a), se ferir gravemente ou ficar doente!")
    print("Sua meta √© acumular pontos e explorar o suficiente para encontrar o caminho de casa. üè†\n")
    print("--- Controles ---")
    print("1Ô∏è‚É£ - Buscar comida | 2Ô∏è‚É£ - Montar abrigo | 3Ô∏è‚É£ - Explorar")
    print("4Ô∏è‚É£ - Dormir (se tiver abrigo) | üá∫ - Usar item da mochila | üá∏ - Sair do jogo")
    print("Durante decis√£o: (C) Comer / (G) Guardar | Durante combate: (A) Atacar / (D) Defender / (F) Fugir")
    print("-----------------\n")
    nome_digitado = input("Antes de come√ßar, digite seu nome (ou ENTER para 'Aventureiro(a)'): ").strip()
    if nome_digitado:
        nome_jogador = nome_digitado
    input(f"\nBem-vindo(a), {nome_jogador}! Pressione ENTER para come√ßar sua jornada... ‚ñ∂Ô∏è")

def desenhar_fim():
    """Exibe a tela final do jogo com base no resultado."""
    clear_screen()
    print("===================================")
    print("         FIM DE JOGO             ")
    print("===================================\n")
    if mensagem_final == "vitoria":
        print(f"üéâ Parab√©ns, {nome_jogador}! Voc√™ sobreviveu e encontrou o caminho de volta para casa! üè°‚ú®")
        print(f"Sua vasta experi√™ncia na floresta te guiou at√© a civiliza√ß√£o em {dias_passados} dias!")
    elif mensagem_final == "saida":
        print(f"Voc√™ decidiu sair do jogo, {nome_jogador}. At√© a pr√≥xima aventura! üëã")
    elif mensagem_final == "derrota_energia":
        print(f"‚ö° {nome_jogador}, voc√™ ficou completamente exausto(a) e n√£o conseguiu mais se mover. A floresta te consumiu. üòµ")
    else: # derrota por vida
        print(f"üíÄ {nome_jogador}, voc√™ sucumbiu aos perigos da floresta. Fim de jogo. ü•Ä")
    print(f"\nSua pontua√ß√£o final: ‚≠ê {pontuacao}")
    print("-----------------------------------\n")
    print("\n--- Di√°rio de Bordo da Sua Jornada ---")
    if historico_acoes:
        for dia, eventos_do_dia in sorted(historico_acoes.items()):
            print(f"\n--- Dia {dia} ---")
            print("   " + "\n   ".join(eventos_do_dia) if eventos_do_dia else "   Nenhum evento registrado neste dia.")
    else:
        print("N√£o h√° registros de sua jornada.")
    print("-------------------------------------\n")
    input("Pressione ENTER para sair. üö™")
    sys.exit()

# --- LOOP PRINCIPAL DO JOGO ---
def main():
    """Fun√ß√£o principal que controla o fluxo do jogo."""
    global estado_jogo, mensagem_acao, item_a_processar

    while True:
        if estado_jogo != INTRO:
            mostrar_status()
            if estado_jogo == COMBATE and inimigo_atual:
                print(f"üëæ Vida do {inimigo_atual}: {vida_inimigo_atual}/{ANIMAIS[inimigo_atual]['vida']}")

        # PROCESSAR STATUS NEGATIVOS ANTES DE VERIFICAR O FIM DE JOGO
        # Isso garante que os efeitos dos status negativos sejam aplicados
        # e potencialmente levem ao fim do jogo se vida/energia chegarem a zero.
        if estado_jogo == JOGANDO or estado_jogo == COMBATE:
            processar_status_negativos()

        if verificar_fim_de_jogo():
            desenhar_fim()
            break

        if estado_jogo == INTRO:
            desenhar_intro()
            estado_jogo = JOGANDO
            mensagem_acao = f"Bem-vindo(a) √† floresta, {nome_jogador}! O que voc√™ far√°? ü§î"
            adicionar_historico("In√≠cio da Jornada. Voc√™ acordou perdido(a) na floresta.")
        
        elif estado_jogo == JOGANDO:
            if acoes_no_dia >= TEMPO_LIMITE_DIA:
                mensagem_acao += "\nüåô A noite est√° caindo. √â perigoso continuar explorando. "
                mensagem_acao += "Considere dormir (4)." if abrigo_construido else "Voc√™ n√£o tem um abrigo seguro para descansar. "
            elif energia < ENERGIA_MAXIMA / 3:
                mensagem_acao += "\n‚ö° Sua energia est√° baixa. Considere dormir (4) para recuperar. "
                if not abrigo_construido:
                    mensagem_acao += "Voc√™ precisa construir um abrigo primeiro. "

            print(f"\n>> {mensagem_acao}\n")
            print("Suas op√ß√µes: 1Ô∏è‚É£ Buscar comida | 2Ô∏è‚É£ Montar abrigo | 3Ô∏è‚É£ Explorar")
            if abrigo_construido:
                print("4Ô∏è‚É£ Dormir e passar o dia")
            print("üá∫ Usar item da mochila | üá∏ Sair do jogo")
            
            escolha = input("Sua a√ß√£o: ").strip().upper()
            mensagem_acao = "" # Resetar mensagem de a√ß√£o para a pr√≥xima itera√ß√£o

            if escolha == '1':
                if buscar_comida(): # Retorna True se encontrou comida e precisa de escolha
                    estado_jogo = ESPERA_COMIDA
            elif escolha == '2':
                montar_abrigo()
            elif escolha == '3':
                explorar() # Pode mudar o estado para COMBATE ou ESPERA_COMIDA internamente
            elif escolha == '4':
                dormir()
            elif escolha == 'U':
                itens_usaveis_mochila = [item for item in mochila if ITENS_GERAL.get(item, {}).get("tipo") in ["comida", "medico", "utilitario"]]
                if itens_usaveis_mochila:
                    estado_jogo = ESPERA_USAR_ITEM
                    mensagem_acao = "Selecione o n√∫mero do item que deseja usar: üéí"
                else:
                    mensagem_acao = "Sua mochila est√° vazia ou n√£o tem itens us√°veis. üòî"
                    adicionar_historico(f"Voc√™ tentou usar um item, mas a mochila estava vazia ou sem itens us√°veis.")
            elif escolha == 'S':
                estado_jogo = FIM
                mensagem_final = "saida"
                adicionar_historico(f"Voc√™ decidiu desistir da jornada.")
            else:
                mensagem_acao = "Comando inv√°lido. Tente novamente. ü§∑‚Äç‚ôÄÔ∏è"

        elif estado_jogo == ESPERA_COMIDA:
            print(f"\n>> {mensagem_acao}\n")
            escolha_comida = input("Sua escolha (C/G): ").strip().upper()
            
            if escolha_comida == 'C':
                if item_a_processar and ITENS_GERAL.get(item_a_processar, {}).get("tipo") == "comida":
                    item_data = ITENS_GERAL[item_a_processar]
                    
                    # Cuidado com item_data["vida_recuperada"] que pode ser uma tupla (min, max)
                    if isinstance(item_data["vida_recuperada"], tuple):
                        vida_rec = random.randint(*item_data["vida_recuperada"])
                    else:
                        vida_rec = item_data["vida_recuperada"]
                    
                    energia_rec = item_data.get("energia_recuperada", 0) # Pode n√£o ter energia recuperada
                    
                    # Consumir diretamente o item encontrado (n√£o est√° na mochila ainda)
                    global vida, energia, pontuacao, status_doente
                    
                    vida = min(vida + vida_rec, VIDA_MAXIMA)
                    energia = min(energia + energia_rec, ENERGIA_MAXIMA)
                    pontuacao += 30
                    
                    mensagem_acao_temp = f"Voc√™ comeu o(a) {item_a_processar}. ‚ù§Ô∏è {vida_rec if vida_rec < 0 else '+' + str(vida_rec)} vida, ‚ö° +{energia_rec} energia, ‚≠ê +30 pontos!"
                    
                    if item_data.get("chance_doenca") and random.random() < item_data["chance_doenca"]:
                        status_doente = True
                        mensagem_acao_temp += " Mas parece que voc√™ pegou uma doen√ßa estranha... ü§¢"
                        adicionar_historico(f"Voc√™ comeu {item_a_processar} e ficou doente.")
                    
                    mensagem_acao = mensagem_acao_temp
                    adicionar_historico(f"Voc√™ comeu o(a) {item_a_processar} que encontrou.")
                else:
                    mensagem_acao = "Erro: sem comida para comer. üòü"
                    adicionar_historico(f"Erro ao tentar consumir comida encontrada.")
            elif escolha_comida == 'G':
                if item_a_processar and adicionar_item_mochila(item_a_processar):
                    mensagem_acao = f"Voc√™ guardou o(a) {item_a_processar} na mochila. üëç"
                    adicionar_historico(f"Voc√™ guardou {item_a_processar} na mochila.")
                else:
                    mensagem_acao = f"Sua mochila est√° cheia, n√£o foi poss√≠vel guardar o(a) {item_a_processar}. üéíüö´"
                    adicionar_historico(f"Voc√™ tentou guardar {item_a_processar}, mas a mochila estava cheia.")
            else:
                mensagem_acao = "Escolha inv√°lida. Pressione C para comer ou G para guardar. ü§∑‚Äç‚ôÇÔ∏è"
                continue # Permanece no estado para nova tentativa
            
            item_a_processar = None
            estado_jogo = JOGANDO

        elif estado_jogo == ESPERA_USAR_ITEM:
            print(f"\n>> {mensagem_acao}\n")
            itens_usaveis = [item for item in mochila if ITENS_GERAL.get(item, {}).get("tipo") in ["comida", "medico", "utilitario"]]
            
            for i, item_nome in enumerate(itens_usaveis):
                print(f"   ({i+1}) {item_nome}")
            
            try:
                escolha_idx = int(input("N√∫mero do item para usar: ").strip())
                usar_item_da_mochila(escolha_idx)
            except (ValueError, IndexError):
                mensagem_acao = "Entrada inv√°lida. Digite um n√∫mero v√°lido. üî¢"
            
            # Se a mensagem de a√ß√£o for a padr√£o de erro, permanece no estado ESPERA_USAR_ITEM
            if "inv√°lida" not in mensagem_acao and "fora do alcance" not in mensagem_acao:
                estado_jogo = JOGANDO

        elif estado_jogo == COMBATE:
            gerenciar_combate()

        time.sleep(1) # Pequena pausa para o jogador ler

if __name__ == "__main__":
    main()